{"meta":{"title":"qiongqiongwoo","subtitle":"just for fun","description":"just for fun","author":"Qiong Qiong","url":"https://github.com/qiongqiongwoo"},"pages":[],"posts":[{"title":"整理的css知识","slug":"整理的css知识","date":"2018-12-14T05:01:21.000Z","updated":"2019-01-04T04:08:34.000Z","comments":true,"path":"2018/12/14/整理的css知识/","link":"","permalink":"https://github.com/qiongqiongwoo/2018/12/14/整理的css知识/","excerpt":"","text":"css标准地址 https://www.w3.org/TR/CSS2/visuren.html#inline-formatting1、block、inline、inline-block每个页面元素都有一个display属性，每个元素的display属性都有一个默认值，比如div的display属性为block，span的display属性为inline，inline元素不会自动换行且没有宽和高、block元素有宽和高度，且会自动换行。常见的元素分类如下：（1）block元素：body form textarea h1 - h6 html table button p ul ol div（2）inline元素：title span a em b strong I map 等（3）inline-block元素：img input td select textarea label区别方式为：是否可以设置宽、高、margin、padding值、是否会换行。对inline元素这只padding-top padding-bottom margin-bottom margin-top不会对周边元素产生影响，会加大自身的范围。2、嵌套规则：（1）块状元素可以包含内联元素或者块元素，内连元素不可以包含块元素只包含内连元素123&lt;a href=\"#\"&gt;&lt;span&gt;&lt;/span&gt;&lt;/a&gt; — 正确&lt;div&gt;&lt;h1&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt; — 正确&lt;span&gt;&lt;div&gt;&lt;/div&gt;&lt;/span&gt; — 正确 （2）h1- h6、p、 dt这几个块元素只能包含内联元素或者可变元素12&lt;p&gt;&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt; -- wrong&lt;p&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt; — wrong （3）特殊的li标签内可以出现div标签（4）块级元素可以与块级元素并列、内联元素可以和内联元素并列123&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt; — right&lt;div&gt;&lt;a href=\"#\"&gt;&lt;/a&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt; — right&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt; -- wrong 3、inline元素改为block元素的方式（1）直接将display值设置为block/inline-block（2）直接将position设置为absolute或者fix4、inline-block元素出现缝隙的解决方式（1）两个inline-block元素之间不能出现换行、空格等（2）设置margin-right值为负值（3）将父元素的font-size、letter-spacing、word-spacing值5、block元素内的inline-block元素出现底部空白或者两个inline-block元素无法对齐的情况（1）使用vertical-align：top（2）例子： https://segmentfault.com/a/11900000109349286、em: 相对于父级元素font-size的比例。rem：相对于根元素html的font-size比例。ex：所用字体中x的高度，通常取em的一半。7、css的三种定位机制：普通流、浮动和绝对定位。position有relative、absolute、fix、staticrelative：相对于元素应该出现的位置的相对位置。absolute：绝对定位的盒子是相对于离他最近的一个已定位的盒子进行定位的，可能是relative，可能是absolute。默认是body。浮动和绝对定位都将元素剥离了文档流。8、background-origin: 取值可以为content-box、padding-box、border-box，规定背景图放置的位置。9、box盒子模型（1）ie设置的height和 width = margin + padding +content-width（2）标准的盒子模型的 width = content-width（3）css3中加了一个属性叫box-sizing 来区分上面的情况（content-box \\ border-box \\ padding-box）10、formatting context: 它是页面中的一块渲染区域、并且有自己的一套渲染规则、他决定了元素如何定位以及与其他元素如何相互作用。常见的类别有：（1）BFC (block formatting context) BFC是一个独立的区域，不受外部元素影响也不影响外部元素 只有块级元素参加 box会在垂直方向上一个接一个的放置 属于同一个BFC的相邻的两个box的margin会重叠 计算BFC高度时，浮动元素也参与计算 每个元素的margin box的左边与包含块的border box的左边相接处，存在浮动也是如此会生成BFC的方式： 根元素比如body float不为none position为absolute或者fixed display为inline-block、table-cell、table-caption、flex、inline-flex overflow为hidden、scroll、auto例子： https://www.jianshu.com/p/66632298e355（2）IFC (inline formatting context) 只会在一个块级元素中只包含内连级别元素时才会生成。 行内级元素（inline-level element）的display为inline、inline-block、inline-table 行内级元素生成行内盒（inline-level box），参与行内格式化上下文 行框的宽度由其内部包含的块以及浮动元素所决定 如果几个行内框无法放入一个行框内，他们可能分配在两个或者多个垂直的行框内 同一个行内框如果不能放入一个行框内，也会分配到多个垂直的行框 行框的高度可以容纳所包含的框，对齐标准为vertical-align（此处会引入下面的12问题）（3）GFC（4）FFC11、line-height: 设置行间的距离，可以设置的方式（1）number：以当前的字体属性值来设置行高(不同的浏览器默认值不同， 介于1 - 1.2之间)（2）百分比：以当前字体属性的百分比来设置（3）length：固定的值12、vertical-align: 默认值为baseline，即按照基线进行对齐，此值是和line-height相关的。（1）css中对基线的定义为：inline-block元素的基线是标准流中最后一个行框的基线， 除非这个行框没有行盒子或者本身overflow属性计算值不是visible，这种情况下，基线是该元素margin底边缘。（2）inline元素有两个高度：和字体相关的content-area，以及实际区域virtual-area（line-height）","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://github.com/qiongqiongwoo/tags/css/"}]},{"title":"compose的执行和实现方式","slug":"compose的执行和实现方式","date":"2018-12-13T07:11:11.000Z","updated":"2019-01-04T04:04:02.000Z","comments":true,"path":"2018/12/13/compose的执行和实现方式/","link":"","permalink":"https://github.com/qiongqiongwoo/2018/12/13/compose的执行和实现方式/","excerpt":"","text":"compose：执行一系列任务的函数 tasks = [ step1, step2, step3… ] Bulleted List 执行顺序从右到左边 第一个函数的参数可以是多个，后面的函数参数只能是一个 函数的执行是同步的 let init = (…args) =&gt; args.reduce((ele1, ele2) =&gt; ele1 + ele2, 0)let step2 = (val) =&gt; val + 2let step3 = (val) =&gt; val + 3let step4 = (val) =&gt; val + 4输出： 15 compose的实现（1）lodash中的实现123456789101112131415161718var flow = function（funcs）&#123; Var length = funcs.length Var index = length while (index--) &#123; if (typeof funcs[index] !== 'function') &#123; throw new TypeError('Expected a function'); &#125; &#125; Return function(…args) &#123; var index = 0 var result = length ? funcs[index].apply(this, args) : args[0] while (++index &lt; length) &#123; result = funcs[index].call(this, result) &#125; return result &#125;&#125; （2）promise实现compose12345678910const compose = function(…funcs) &#123; let init = funcs.pop() return function(...arg) &#123; return funcs.reverse().reduce(function(sequence, func) &#123; return sequence.then(function(result) &#123; return func.call(null, result) &#125;) &#125;, Promise.resolve(init.apply(null, arg))) &#125;&#125;","categories":[],"tags":[{"name":"js, node, compose","slug":"js-node-compose","permalink":"https://github.com/qiongqiongwoo/tags/js-node-compose/"}]},{"title":"客户端http请求的header信息","slug":"客户端http请求的header信息","date":"2018-12-12T07:41:21.000Z","updated":"2019-01-04T02:56:21.000Z","comments":true,"path":"2018/12/12/客户端http请求的header信息/","link":"","permalink":"https://github.com/qiongqiongwoo/2018/12/12/客户端http请求的header信息/","excerpt":"","text":"1、HTTP请求方式GET：向Web服务器请求一个文件POST：向Web服务器发送数据让Web服务器进行处理PUT：向Web服务器发送数据并存储在Web服务器内部HEAD：检查一个对象是否存在DELETE：从Web服务器上删除一个文件CONNECT：对通道提供支持TRACE：跟踪到服务器的路径OPTIONS：查询Web服务器的性能请求说明：主要使用到“GET”和“POST”。实例：POST /test/tupian/cm HTTP/1.1分成三部分：（1）POST：HTTP请求方式（2）/test/tupian/cm：请求Web服务器的目录地址（或者指令）（3）HTTP/1.1: URI（Uniform Resource Identifier，统一资源标识符）及其版本 2、Host说明：请求的web服务器域名地址实例：例如web请求URL：http://zjm-forum-test10.zjm.baidu.com:8088/test/tupian/cmHost就为zjm-forum-test10.zjm.baidu.com:8088 3、User-Agent说明：HTTP客户端运行的浏览器类型的详细信息。通过该头部信息，web服务器可以判断到当前HTTP请求的客户端浏览器类别。实例：User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11 4、Accept说明：指定客户端能够接收的内容类型，内容类型中的先后次序表示客户端接收的先后次序。实例：例如：Accept:text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,/;q=0.5备注：在Prototyp（1.5）的Ajax代码封装中，将Accept默认设置为“text/javascript, text/html, application/xml, text/xml, /”。这是因为Ajax默认获取服务器返回的Json数据模式。在Ajax代码中，可以使用XMLHttpRequest 对象中setRequestHeader函数方法来动态设置这些Header信息。 5、Accept-Language说明：指定HTTP客户端浏览器用来展示返回信息所优先选择的语言。实例：Accept-Language: zh-cn,zh;q=0.5这里默认为中文。 6、Accept-Encoding说明：指定客户端浏览器可以支持的web服务器返回内容压缩编码类型。表示允许服务器在将输出内容发送到客户端以前进行压缩，以节约带宽。而这里设置的就是客户端浏览器所能够支持的返回压缩格式。实例：Accept-Encoding: gzip,deflate备注：其实在百度很多产品线中，apache在给客户端返回页面数据之前，将数据以gzip格式进行压缩。另外有关deflate压缩介绍：http://man.chinaunix.net/newsoft/ApacheMenual_CN_2.2new/mod/mod_deflate.html 7、Accept-Charset说明：浏览器可以接受的字符编码集。实例：Accept-Charset: gb2312,utf-8;q=0.7,*;q=0.7 8、Content-Type说明：显示此HTTP请求提交的内容类型。一般只有post提交时才需要设置该属性。实例：Content-type: application/x-www-form-urlencoded;charset:UTF-8有关Content-Type属性值可以如下两种编码类型：（1）“application/x-www-form-urlencoded”： 表单数据向服务器提交时所采用的编码类型，默认的缺省值就是“application/x-www-form-urlencoded”。 然而，在向服务器发送大量的文本、包含非ASCII字符的文本或二进制数据时这种编码方式效率很低。（2）“multipart/form-data”： 在文件上载时，所使用的编码类型应当是“multipart/form-data”，它既可以发送文本数据，也支持二进制数据上载。当提交为单单数据时，可以使用“application/x-www-form-urlencoded”；当提交的是文件时，就需要使用“multipart/form-data”编码类型。在Content-Type属性当中还是指定提交内容的charset字符编码。一般不进行设置，它只是告诉web服务器post提交的数据采用的何种字符编码。一般在开发过程，是由前端工程与后端UI工程师商量好使用什么字符编码格式来post提交的，然后后端ui工程师按照固定的字符编码来解析提交的数据。所以这里设置的charset没有多大作用。 9、Connection说明：表示是否需要持久连接。如果web服务器端看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点， web服务器需要在返回给客户端HTTP头信息中发送一个Content-Length（返回信息正文的长度）头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然 后在正式写出内容之前计算它的大小。实例：Connection: keep-alive 10、Keep-Alive说明：显示此HTTP连接的Keep-Alive时间。使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。以前HTTP请求是一站式连接，从HTTP/1.1协议之后，就有了长连接，即在规定的Keep-Alive时间内，连接是不会断开的。实例：Keep-Alive: 300 11、cookie说明：HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。 12、Referer说明：包含一个URL，用户从该URL代表的页面出发访问当前请求的页面服务器端返回HTTP头部信息1、Content-Length说明：表示web服务器返回消息正文的长度2、Content-Type:说明：返回数据的类型（例如text/html文本类型）和字符编码格式。实例：Content-Type: text/html;charset=utf-83、Date说明：显示当前的时间","categories":[],"tags":[{"name":"header, http request, htttp options","slug":"header-http-request-htttp-options","permalink":"https://github.com/qiongqiongwoo/tags/header-http-request-htttp-options/"}]}]}